<Lems xmlns="http://www.neuroml.org/lems/0.7"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:schemaLocation="http://www.neuroml.org/lems/0.7 ../../LEMS/Schemas/LEMS/LEMS_v0.7.xsd"
      description="A number of synaptic ComponentTypes for use in NeuroML 2 documents. These generally extend the _baseSynapse_ ComponentType.">


    <!-- These definitions reference entries in the Computational Neuroscience Ontology. To translate
    the cnoTerms into URLs, follow example of synapse, e.g. cno_0000009 ->
    http://bioportal.bioontology.org/ontologies/46856/?p=terms&conceptid=cno%3Acno_0000009
    alternatively download the OWL file from https://github.com/INCF and open in Protege: http://protege.stanford.edu

    'cnoTerm' MAY be added as a new attribute, but that would add neuroscience specific terms to LEMS. May be better to add
    'reference' or 'ontRef' as a new attribute -->

    <!-- Including standard unit comp types & units for NeuroML v2.0 -->
    <Include file="NeuroMLCoreCompTypes.xml"/>
    <Include file="Inputs.xml"/>


    <ComponentType name="baseSynapse"
        extends="baseVoltageDepPointCurrent"
        description="Base type for all synapses, i.e. ComponentTypes which produce a current (dimension current) and change Dynamics in response to an incoming event. cno_0000009"> <!-- http://bioportal.bioontology.org/ontologies/46856/?p=terms&conceptid=cno%3Acno_0000009 -->

        <EventPort name="in" direction="in"/>


    </ComponentType>

    <ComponentType name="baseSynapseDL"
        extends="baseVoltageDepPointCurrentDL"
        description="Base type for all synapses, i.e. ComponentTypes which produce a dimensionless current and change Dynamics in response to an incoming event. cno_0000009"> <!-- http://bioportal.bioontology.org/ontologies/46856/?p=terms&conceptid=cno%3Acno_0000009 -->

        <EventPort name="in" direction="in"/>


    </ComponentType>


    <ComponentType name="baseConductanceBasedSynapse"
        extends="baseSynapse"
        description="Synapse model which exposes a conductance _g in addition to producing a current. Not necessarily ohmic!! cno_0000027">

        <Parameter name="gbase" dimension="conductance" description="Baseline conductance, generally the maximum conductance following a single spike"/>
        <Parameter name="erev" dimension="voltage" description="Reversal potential of the synapse"/>

        <Exposure name="g" dimension="conductance" description="Time varying conductance through the synapse"/>

        <Dynamics>
            <DerivedVariable name="i" exposure="i" dimension="current" value="0" />
            <DerivedVariable name="g" exposure="g" dimension="conductance" value="0" />
        </Dynamics>

    </ComponentType>


    <ComponentType name="expOneSynapse"
       extends="baseConductanceBasedSynapse"
       description="Ohmic synapse model whose conductance rises instantaneously by _gbase on receiving an event, and which decays exponentially to zero with time course _tauDecay">

        <Parameter name="tauDecay" dimension="time" description="Time course of decay"/>
      
        <Child name="notes" type="notes"/>

        <Dynamics>

            <StateVariable name="g" dimension="conductance" exposure="g"/>

            <DerivedVariable name="i" exposure="i" dimension="current" value="g * (erev - v)" />
         
            <TimeDerivative variable="g" value="-g / tauDecay" />

            <OnStart>
                <StateAssignment variable="g" value="0" />
            </OnStart>

            <OnEvent port="in">
                <StateAssignment variable="g" value="g + gbase" />
            </OnEvent>

        </Dynamics>
    </ComponentType>


    <ComponentType name="expTwoSynapse"
       extends="baseConductanceBasedSynapse"
       description="Ohmic synapse model whose conductance waveform on receiving an event has a rise time of _tauRise and a decay time of _tauDecay. Max conductance reached during this time (assuming zero conductance before) is _gbase.">
      
        <Parameter name="tauRise" dimension="time" />
        <Parameter name="tauDecay" dimension="time" />

      <!--<DerivedParameter name="peakTime" dimension="time" value="ln(tauDecay/tauRise) * (tauRise*tauDecay)/(tauDecay - tauRise)" />
      <DerivedParameter name="factor" dimension="none" value="1 / (-exp(-peakTime/tauRise) + exp(-peakTime/tauDecay))" />-->

        <Child name="notes" type="notes"/>

        <Dynamics>

            <StateVariable name="A" dimension="none"/>
            <StateVariable name="B" dimension="none"/>

         <!-- TODO: evaluate only once!! -->
         <!-- TODO: catch tauRise = 0..! -->
            <DerivedVariable name="peakTime" dimension="time" value="ln(tauDecay / tauRise) * (tauRise * tauDecay)/(tauDecay - tauRise)"/>
            <DerivedVariable name="factor" dimension="none" value="1 / (-exp(-peakTime / tauRise) + exp(-peakTime / tauDecay))"/>
            <DerivedVariable name="A_rate" dimension="per_time" value="-1 / tauRise"/>
            <DerivedVariable name="A_factor" dimension="none" value="factor"/>

            <DerivedVariable name="g" dimension="conductance" exposure="g" value="gbase * (B - A)" />
            <DerivedVariable name="i" exposure="i" dimension="current" value="g * (erev - v)" />

            <TimeDerivative variable="A" value="A * A_rate" />
            <TimeDerivative variable="B" value="-B / tauDecay" />

            <OnStart>
                <StateAssignment variable="A" value="0" />
                <StateAssignment variable="B" value="0" />
            </OnStart>

            <OnEvent port="in">
                <StateAssignment variable="A" value="A + A_factor" />
                <StateAssignment variable="B" value="B + factor" />
            </OnEvent>

        </Dynamics>
    </ComponentType>
   
   
    <ComponentType name="baseBlock"
        description="Base of any ComponentType which produces a varying scaling (or blockage) of synaptic strength of magnitude _scaling">
        
        <Exposure name="scaling" dimension="none"/>

    </ComponentType>
   

    <ComponentType name="voltageConcDepBlock"
       extends="baseBlock"
       description="Synaptic blocking mechanism which varys with membrane potential across the synapse, e.g. in NMDA receptor mediated synapses">
           
        <Parameter name="blockConcentration" dimension="concentration" />
        <Parameter name="scalingConc" dimension="concentration" />
        <Parameter name="scalingVolt" dimension="voltage" />

        <Requirement name="v" dimension="voltage"/>
      
        <Text name="species"/>
      
        <Dynamics>
            <DerivedVariable name="scaling" dimension="none" exposure="scaling" value="1/(1 + (blockConcentration / scalingConc)* exp(-1 * (v / scalingVolt)))" />
        </Dynamics>

    </ComponentType>




    <ComponentType name="nmdaSynapse"
       extends="expTwoSynapse"
       description="NMDA receptor mediated synapse, whose conductance is scaled by a factor dependent on the concentration of magnesium (assumed fixed) and membrane potential">

        <Child name="notes" type="notes"/>
        <Child name="voltageConcDepBlock" type="voltageConcDepBlock"/>

        <Dynamics>
            <StateVariable name="A" dimension="none"/>
            <StateVariable name="B" dimension="none"/>

         <!-- TODO: evaluate only once!! -->
            <DerivedVariable name="peakTime" dimension="time" value="(tauRise * tauDecay)/(tauDecay - tauRise) * ln(tauDecay / tauRise)" />
            <DerivedVariable name="factor" dimension="none" value="1 / (-exp(-peakTime / tauRise) + exp(-peakTime / tauDecay))" />

            <DerivedVariable name="block" dimension="none" select="voltageConcDepBlock/scaling" />
            <DerivedVariable name="g" dimension="conductance" exposure="g" value="gbase * block * (B - A)" />
            <DerivedVariable name="i" exposure="i" dimension="current" value="g * (erev - v)" />


            <TimeDerivative variable="A" value="-A / tauRise" />
            <TimeDerivative variable="B" value="-B / tauDecay" />

            <OnStart>
                <StateAssignment variable="A" value="0" />
                <StateAssignment variable="B" value="0" />
            </OnStart>

            <OnEvent port="in">
                <StateAssignment variable="A" value="A + factor" />
                <StateAssignment variable="B" value="B + factor" />
            </OnEvent>
         
        </Dynamics>
    </ComponentType>


    <ComponentType name="stpMechanism"
      description="ComponentType for model of short term plasticity. Used in _stpSynapse_. Note, need to enable passing of spike events to child elements so that stpMechanism can contain the state variables _R, _U, etc. and update them appropriately. cno_0000182">

        <Parameter name="initReleaseProb" dimension="none" />
        <Parameter name="tauFac" dimension="time" />
        <Parameter name="tauRec" dimension="time" />

        <Exposure name="initReleaseProb" dimension="none"/>
        <Exposure name="tauFac" dimension="time"/>
        <Exposure name="tauRec" dimension="time"/>

        <Dynamics>
            <DerivedVariable name="initReleaseProb" dimension="none"  exposure="initReleaseProb" value="initReleaseProb" />
            <DerivedVariable name="tauFac" dimension="time" exposure="tauFac" value="tauFac" />
            <DerivedVariable name="tauRec" dimension="time" exposure="tauRec" value="tauRec" />
        </Dynamics>

    </ComponentType>


    <ComponentType name="stpSynapse"
       extends="expTwoSynapse"
       description="Short term plasticity model based on Tsodyks, M., Uziel, A., and Markram, H. (2000). Synchrony generation in recurrent networks with frequency-dependent synapses. J Neurosci 20, RC50. and Tsodyks, M.V., and Markram, H. (1997). The neural code between neocortical pyramidal neurons depends on neurotransmitter release probability. Proc Natl Acad Sci U S A 94, 719-723. cno_0000188">

        <Constant name="tsinceRate" dimension="none" value="1"/>
        <Constant name="longTime" dimension="time" value="1000s"/>

        <Child name="stpMechanism" type="stpMechanism"/>

        <Exposure name="tsince" dimension="time"/>
        <Exposure name="R" dimension="none"/>
        <Exposure name="U" dimension="none"/>

        <Dynamics>
            <StateVariable name="A" dimension="none"/>
            <StateVariable name="B" dimension="none"/>

            <StateVariable name="R" dimension="none" exposure="R"/>
            <StateVariable name="U" dimension="none" exposure="U"/>

            <StateVariable name="tsince" dimension="time" exposure="tsince"/>

         <!-- TODO: evaluate only once!! -->
            <DerivedVariable name="peakTime" dimension="time" value="(tauRise * tauDecay)/(tauDecay - tauRise) * ln(tauDecay / tauRise)" />
            <DerivedVariable name="factor" dimension="none" value="1 / (-exp(-peakTime / tauRise) + exp(-peakTime / tauDecay))" />

            <DerivedVariable name="initReleaseProb" dimension="none" select="stpMechanism/initReleaseProb" />
            <DerivedVariable name="tauRec" dimension="time" select="stpMechanism/tauRec" />
            <DerivedVariable name="tauFac" dimension="time" select="stpMechanism/tauFac" />

            <DerivedVariable name="plasticityFactor" dimension="none" value="R * U" />

            <DerivedVariable name="g" dimension="conductance" exposure="g" value="gbase * plasticityFactor * (B - A)" />

            <DerivedVariable name="i" exposure="i" dimension="current" value="g * (erev - v)" />


            <TimeDerivative variable="A" value="-A / tauRise" />
            <TimeDerivative variable="B" value="-B / tauDecay" />

            <TimeDerivative variable="tsince" value="tsinceRate" />

            <OnStart>
                <StateAssignment variable="A" value="0" />
                <StateAssignment variable="B" value="0" />

                <StateAssignment variable="R" value="1" />
                <StateAssignment variable="tsince" value="longTime" />
            </OnStart>

            <OnEvent port="in">
                <StateAssignment variable="A" value="A + factor" />
                <StateAssignment variable="B" value="B + factor" />

                <StateAssignment variable="R" value="R * (1-U) * exp(-1 * (tsince/tauRec)) + 1 - exp(-1 * (tsince / tauRec)) " />

                <StateAssignment variable="U" value="U * exp(-(tsince) / tauFac) + initReleaseProb * (1 - (U * exp(-(tsince) / tauFac)))" />

                <StateAssignment variable="tsince" value="0" />
            </OnEvent>

            <OnCondition test="t .eq. 0">
                <StateAssignment variable="U" value="initReleaseProb" />
            </OnCondition>

        </Dynamics>

    </ComponentType>

   

  <!---        -->

    <ComponentType name="stdpSynapse"
       extends="expTwoSynapse"
       description="Spike timing dependent plasticity mechanism,  NOTE: EXAMPLE NOT YET WORKING!!!! cno_0000034">

        <Constant name="tsinceRate" dimension="none" value="1"/>
        <Constant name="longTime" dimension="time" value="1000s"/>

        <Exposure name="tsince" dimension="time"/>

        <Exposure name="M" dimension="none"/>
        <Exposure name="P" dimension="none"/>

        <Dynamics>
            <StateVariable name="A" dimension="none"/>
            <StateVariable name="B" dimension="none"/>

            <StateVariable name="M" dimension="none" exposure="M"/>
            <StateVariable name="P" dimension="none" exposure="P"/>

            <StateVariable name="tsince" dimension="time" exposure="tsince"/>

         <!-- TODO: evaluate only once!! -->
            <DerivedVariable name="peakTime" dimension="time" value="(tauRise * tauDecay) / (tauDecay - tauRise) * ln(tauDecay / tauRise)" />
            <DerivedVariable name="factor" dimension="none" value="1 / (-exp(-peakTime / tauRise) + exp(-peakTime / tauDecay))" />

            <DerivedVariable name="g" dimension="conductance" exposure="g" value="gbase * (B - A)" />

            <DerivedVariable name="i" exposure="i" dimension="current" value="g * (erev - v)" />


            <TimeDerivative variable="A" value="-A / tauRise" />
            <TimeDerivative variable="B" value="-B / tauDecay" />

            <TimeDerivative variable="tsince" value="tsinceRate" />

            <OnStart>
                <StateAssignment variable="A" value="0" />
                <StateAssignment variable="B" value="0" />

                <StateAssignment variable="M" value="1" />
                <StateAssignment variable="P" value="1" />

                <StateAssignment variable="tsince" value="longTime" />
            </OnStart>

            <OnEvent port="in">
                <StateAssignment variable="A" value="A + factor" />
                <StateAssignment variable="B" value="B + factor" />
                <StateAssignment variable="tsince" value="0" />
            </OnEvent>


        </Dynamics>

    </ComponentType>

</Lems>

